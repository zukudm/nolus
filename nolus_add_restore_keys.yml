- name: Run nolus-networks validator setup
  vars_files: 
    - vars/vars.yml
    
  hosts: "{{ host }}"
  gather_facts: no
  become: yes

  pre_tasks:
    - pause:
        prompt: "Input your recovery mnemonic"
        echo: no
      when: ask_recovery != "no" 
      register: recovery_mnemonic


  
  tasks:
 
    - name: Get file content version.md content
      ansible.builtin.slurp:
        src: "{{ nolus_git_name +'/'+ network +'/version.md' }}"
      register: version_output

    - name: Get version
      set_fact: version="{{ version_output['content']| b64decode }}"
      
    - name: Set recovery mnemonic
      set_fact: recovery="{{ recovery_mnemonic.user_input }}"
      when: recovery_mnemonic.user_input is defined


    - name: Get moniker name from config file inside container
      community.docker.docker_container_exec: 
        container: "{{ container_name }}-{{ version }}"
        command: sh -c "cat ~/.nolus/config/config.toml config.toml | grep moniker | awk '{print $3}' | awk '{print substr($0, 2, length($0) - 2)}'"
      register: moniker_out

    - name: Print moniker name
      ansible.builtin.debug:
        var: moniker_out.stdout 

    - name: Add curl and jq pkg into the container
      community.docker.docker_container_exec: 
        container: "{{ container_name }}-{{ version }}"
        command: sh -c "apk add curl; apk add jq"
          

    # - name: Get sync status inside container
    #   community.docker.docker_container_exec: 
    #     container: "{{ container_name }}-{{ version }}"
    #     command: sh -c "curl http://localhost:26657/status | jq .result.sync_info.catching_up"
    #   register: sync_out


    # - name: Validate whether the node synced
    #   assert:
    #     that: 
    #       - sync_out.stdout == "false"
    #     fail_msg: "The node is not synced!!!! Please wait for a while"

    - name: Print if recovery is enabled
      ansible.builtin.debug:
        msg: " printf '%s\n%s\n' {{ recovery }} {{ password4key  }} | nolusd keys add {{ keyname }} --recover"
      when: recovery is defined

    - name: Run a new key generation inside container
      community.docker.docker_container_exec: 
        container: "{{ container_name }}-{{ version }}"
        command: sh -c " printf '%s\n%s\n' {{ password4key }} {{ password4key }} | nolusd keys add {{ keyname }}"
      register: out
      when: recovery is not defined

    - name: Run recovery key generation inside container
      community.docker.docker_container_exec: 
        container: "{{ container_name }}-{{ version }}"
        command: sh -c "printf '%s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s \n%s\n' {{ recovery }} {{ password4key }} | nolusd keys add {{ keyname }} --recover"
      register: out_recovery
      when: recovery is defined

    - name: Print all information about new key
      block:
        - name: Print all details about key
          ansible.builtin.debug:
            var: out.stdout

        - name: Print recovery information about key (mnemonic)
          ansible.builtin.debug:
            var: out.stderr_lines

      when: recovery is not  defined
    
   
    - name: Print all details about recover key
      ansible.builtin.debug:
        var: out_recovery.stdout
      when: recovery is defined

    # - name: Upgrade to a Validator
    #   community.docker.docker_container_exec: 
    #     container: "{{ container_name }}-{{ version }}"
    #     command: sh -c ' printf "%s\n" {{ password4key }} | nolusd tx staking create-validator --amount 1000000unls --commission-rate "0.1" --commission-max-rate "0.20" --commission-max-change-rate "0.1" --min-self-delegation "1" --pubkey=$(nolusd tendermint show-validator)  --moniker {{moniker_out.stdout}} --chain-id "nolus-rila" --gas-prices 0.0042unls --from {{keyname}} --yes'
    #   register: out_validator
      

    # - name: Print all details about recover key
    #   ansible.builtin.debug:
    #     var: out_validator

        

      
          
    


      

    
      




        


      
